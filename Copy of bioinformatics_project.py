# -*- coding: utf-8 -*-
"""Bioinformatics Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/184yVOg3ejw4wHF6zlQ9EaapSdwVQm0sN
"""

# 0. Imports required packages for fancy python tool

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import xlrd
# %matplotlib inline

# 1. Uplaod the human genome as a dataset matrix with Cell types and genes as axes:


file = 'genome_library.xlsx' #for an earlier version of Excel, you may need to use the file extension of 'xls'
matrix = pd.read_excel(file,sheetname=0,header=0,index_col=False,keep_default_na=True)
matrix.head() # This is a DataFrame


#Displays to the user the possible cell types that are available to the user
#User will input the reference as an input in the next prompt
# f=open('Cell_Type_Library_Prompt (1).txt','r')
# for line in f:
#  print (line)

#Takes in the user reference number and will be used as call numbers
#for the evaluation of the datamatrix 
# 2. Isolate Columns into cell types

numrows = len(matrix)-1 # length minus the title row
numcols = len(matrix.columns)

print('This tool uses',numcols,'possible cell types that may overlap.')
print('This tool searches',numrows,'possible genes.')

# 3. Print out the cell type library
# matrix = matrix.values # this converts the DataFrame to an array so that it can be indexed
cell_types= matrix.dtypes.index

print('Cell Types:',cell_types)

# Group all three samples into a single tissue type to call in the dropdown
FLiver=['FLiver1', 'FLiver2', 'FLiver3']
Lung=['Lung1', 'Lung2', 'Lung3']
Liver=['Liver1', 'Liver2', 'Liver3']
UHR=['UHR1', 'UHR2', 'UHR3']
Brain=['Brain1','Brain2', 'Brain3']
FBrain = ['FBrain1', 'FBrain2', 'FBrain3']
Prostate=['Prostate1','Prostate2', 'Prostate3']
Muscle=['Muscle1', 'Muscle2', 'Muscle3']
Heart=['Heart1','Heart2', 'Heart3']
Spine=['Spine1', 'Spine2', 'Spine3']
Tonsil=['Tonsil1', 'Tonsil2','Tonsil3']
Trachea=['Trachea1', 'Trachea2', 'Trachea3']
Uterus=['Uterus1', 'Uterus2','Uterus3']
Intestine=['Intestine1', 'Intestine2', 'Intestine3']
Skin=['Skin1', 'Skin2','Skin3']
Ovary=['Ovary1', 'Ovary2', 'Ovary3']
Testis=['Testis', 'Testis2', 'Testis3']
Pancreas=['Pancreas1', 'Pancreas2', 'Pancreas3']
Thymus=['Thymus1', 'Thymus2', 'Thymus3']
FThymus=['FThymus1', 'FThymus2', 'FThymus3']
Kidney=['Kidney1', 'Kidney2', 'Kidney3']
FKidney=['FKidney1', 'FKidney2', 'FKidney3']
Placenta=['Placenta1', 'Placenta2','Placenta3']
Thyroid=['Thyroid1', 'Thyroid2', 'Thyroid3']
Salivary=['Salivary1','Salivary2', 'Salivary3']
Colon=['Colon1', 'Colon2', 'Colon3']
Mammary=['Mammary1','Mammary2', 'Mammary3']
Spleen=['Spleen1', 'Spleen2', 'Spleen3']
Adrenal=['Adrenal1','Adrenal2', 'Adrenal3']
Lympho=['Lympho1', 'Lympho2', 'Lympho3']
Marrow=['Marrow1','Marrow2', 'Marrow3']
Retina=['Retina1', 'Retina2', 'Retina3']

# 4. Create Cell Type Buttons for User to Select
# INSERT CELL TYPES YOU WISH TO COMPARE
User_Step_1 = 'Select up to 5 tissue types you would like to compare.' #@param {type:"string"}
Tissue1 = 'Marrow' #@param ['FLiver','Lung','Liver','UHR', 'Brain','FBrain', 'Prostate', 'Muscle','Heart','Spine', 'Tonsil', 'Trachea', 'Uterus','Intestine', 'Skin','Ovary','Testis', 'Pancreas', 'Thymus', 'FThymus','Kidney', 'FKidney','Placenta', 'Thyroid', 'Salivary','Colon','Mammary','Spleen','Adrenal', 'Lympho','Marrow','Retina','Empty'] {allow-input: true}
Tissue2 = 'UHR' #@param ['FLiver','Lung','Liver','UHR', 'Brain','FBrain', 'Prostate', 'Muscle','Heart','Spine', 'Tonsil', 'Trachea', 'Uterus','Intestine', 'Skin','Ovary','Testis', 'Pancreas', 'Thymus', 'FThymus','Kidney', 'FKidney','Placenta', 'Thyroid', 'Salivary','Colon','Mammary','Spleen','Adrenal', 'Lympho','Marrow','Retina','Empty'] {allow-input: true}
Tissue3 = "FThymus" #@param ["FLiver", "Lung", "Liver", "UHR", "Brain", "FBrain", "Prostate", "Muscle", "Heart", "Spine", "Tonsil", "Trachea", "Uterus", "Intestine", "Skin", "Ovary", "Testis", "Pancreas", "Thymus", "FThymus", "Kidney", "FKidney", "Placenta", "Thyroid", "Salivary", "Colon", "Mammary", "Spleen", "Adrenal", "Lympho", "Marrow", "Retina",'Empty'] {allow-input: true}
Tissue4 = 'FKidney' #@param ['FLiver','Lung','Liver','UHR', 'Brain','FBrain', 'Prostate', 'Muscle','Heart','Spine', 'Tonsil', 'Trachea', 'Uterus','Intestine', 'Skin','Ovary','Testis', 'Pancreas', 'Thymus', 'FThymus','Kidney', 'FKidney','Placenta', 'Thyroid', 'Salivary','Colon','Mammary','Spleen','Adrenal', 'Lympho','Marrow','Retina','Empty'] {allow-input: true}
Tissue5 = 'Empty' #@param ['FLiver','Lung','Liver','UHR', 'Brain','FBrain', 'Prostate', 'Muscle','Heart','Spine', 'Tonsil', 'Trachea', 'Uterus','Intestine', 'Skin','Ovary','Testis', 'Pancreas', 'Thymus', 'FThymus','Kidney', 'FKidney','Placenta', 'Thyroid', 'Salivary','Colon','Mammary','Spleen','Adrenal', 'Lympho','Marrow','Retina','Empty'] {allow-input: true}

# 5. Print out which tissue types user chose:
tissue_choices=[]
tissue_choices.append(Tissue1)
tissue_choices.append(Tissue2)
tissue_choices.append(Tissue3)
tissue_choices.append(Tissue4)
tissue_choices.append(Tissue5)

while 'Empty' in tissue_choices: tissue_choices.remove('Empty')
    
print("Your Tissue Choices are:", tissue_choices)

tissues_chosen=[]
for i in range(len(tissue_choices)):
  if tissue_choices[i]=='FLiver':
    tissues_chosen+=FLiver
  elif tissue_choices[i]=='Lung':
    tissues_chosen+=Lung
  elif tissue_choices[i]=='Liver':
    tissues_chosen+=Liver
  elif tissue_choices[i]=='UHR':
    tissues_chosen+=UHR
  elif tissue_choices[i]=='Brain':
    tissues_chosen+=Brain
  elif tissue_choices[i]=='FBrain':
    tissues_chosen+=FBrain
  elif tissue_choices[i]=='Prostate':
    tissues_chosen+=Prostate
  elif tissue_choices[i]=='Muscle':
    tissues_chosen+=Muscle
  elif tissue_choices[i]=='Heart':
    tissues_chosen+=Heart
  elif tissue_choices[i]=='Spine':
    tissues_chosen+=Spine
  elif tissue_choices[i]=='Tonsil':
    tissues_chosen+=Tonsil
  elif tissue_choices[i]=='Trachea':
    tissues_chosen+=Trachea
  elif tissue_choices[i]=='Uterus':
    tissues_chosen+=Uterus
  elif tissue_choices[i]=='Intestine':
    tissues_chosen+=Intestine
  elif tissue_choices[i]=='Skin':
    tissues_chosen+=Skin
  elif tissue_choices[i]=='Ovary':
    tissues_chosen+=Ovary
  elif tissue_choices[i]=='Testis':
    tissues_chosen+=Testis
  elif tissue_choices[i]=='Pancreas':
    tissues_chosen+=Pancreas
  elif tissue_choices[i]=='Thymus':
    tissues_chosen+=Thymus
  elif tissue_choices[i]=='FThymus':
    tissues_chosen+=FThymus
  elif tissue_choices[i]=='Kidney':
    tissues_chosen+=Kidney
  elif tissue_choices[i]=='FKidney':
    tissues_chosen+=Kidney
  elif tissue_choices[i]=='Placenta':
    tissues_chosen+=Placenta
  elif tissue_choices[i]=='Thyroid':
    tissues_chosen+=Thyroid
  elif tissue_choices[i]=='Salivary':
    tissues_chosen+=Salivary
  elif tissue_choices[i]=='Colon':
    tissues_chosen+=Colon
  elif tissue_choices[i]=='Mammary':
    tissues_chosen+=Mammary
  elif tissue_choices[i]=='Spleen':
    tissues_chosen+=Spleen
  elif tissue_choices[i]=='Adrenal':
    tissues_chosen+=Adrenal
  elif tissue_choices[i]=='Lympho':
    tissues_chosen+=Lympho
  elif tissue_choices[i]=='Marrow':
    tissues_chosen+=Marrow
  elif tissue_choices[i]=='Retina':
    tissues_chosen+=Retina
print(tissues_chosen)

#6 Extracts the cell type columns depending on the user specified input
updated_matrix=matrix[tissues_chosen]
# 12: Identify 50 max values for each of the cell types chosen. 
updated_matrix["avg"]=updated_matrix.mean(axis=1)


# 7. Append gene name (as a list) to the dataset matrix
print(updated_matrix)

#8
numrows = len(updated_matrix)
numcols = len(updated_matrix.columns)-2
num_tissues= int(numcols/3)

if num_tissues ==1:
  tm1=updated_matrix.iloc[:,0:2]
  updated_matrix['Tissue1_avg']=tm1.mean(axis=1)
elif num_tissues ==2:
  tm1=updated_matrix.iloc[:,0:2]
  updated_matrix['Tissue1_avg']=tm1.mean(axis=1)
  tm2=updated_matrix.iloc[:,3:5]
  updated_matrix['Tissue2_avg']=tm2.mean(axis=1)
elif num_tissues ==3:
  tm1=updated_matrix.iloc[:,0:2]
  updated_matrix['Tissue1_avg']=tm1.mean(axis=1)
  tm2=updated_matrix.iloc[:,3:5]
  updated_matrix['Tissue2_avg']=tm2.mean(axis=1)
  tm3=updated_matrix.iloc[:,6:8]
  updated_matrix['Tissue3_avg']=tm3.mean(axis=1)
elif num_tissues ==4:
  tm1=updated_matrix.iloc[:,0:2]
  updated_matrix['Tissue1_avg']=tm1.mean(axis=1)
  tm2=updated_matrix.iloc[:,3:5]
  updated_matrix['Tissue2_avg']=tm2.mean(axis=1)
  tm3=updated_matrix.iloc[:,6:8]
  updated_matrix['Tissue3_avg']=tm3.mean(axis=1)
  tm4=updated_matrix.iloc[:,9:11]
  updated_matrix['Tissue4_avg']=tm4.mean(axis=1)
else:
  tm1=updated_matrix.iloc[:,0:2]
  updated_matrix['Tissue1_avg']=tm1.mean(axis=1)
  tm2=updated_matrix.iloc[:,3:5]
  updated_matrix['Tissue2_avg']=tm2.mean(axis=1)
  tm3=updated_matrix.iloc[:,6:8]
  updated_matrix['Tissue3_avg']=tm3.mean(axis=1)
  tm4=updated_matrix.iloc[:,9:11]
  updated_matrix['Tissue4_avg']=tm4.mean(axis=1)
  tm5=updated_matrix.iloc[:,12:14]
  updated_matrix['Tissue5_avg']=tm5.mean(axis=1)

  
print(updated_matrix)

# 12 continued
#max_sum = updated_matrix.nlargest(16,'sum')
gene_matrix=matrix['Gene_Symbol']
updated_matrix=pd.concat([gene_matrix,updated_matrix],axis=1)
max_avg = updated_matrix.nlargest(16,'avg')
#print(updated_matrix)
#print(max_sum)
print(max_avg)

#13 Normalization

Gene_list=[]
Row_number=[]
sum_list=[]
avg_list=[]
Express=[]

for i in max_avg.index:
  Row_number.append(i)

for j in range(len(Row_number)):
  k=0
  length=len(max_avg.loc[Row_number[j]])
  for i in max_avg.loc[Row_number[j]]:
    if k== 0:
      Gene_list.append(i)
    elif k==length-1:
      avg_list.append(i)
    else:
      Express.append(i)
    k=k+1
Express_mean=[]
for i in range(len(avg_list)):
  Express_mean.append(Express[len(tissues_chosen)*i:len(tissues_chosen)*i+len(tissues_chosen)]/avg_list[i])
print(Express_mean)

#13 Threshold Complete
diff=[]
diff_old=[]
for i in range(len(Express_mean)):
  diff.append(max(Express_mean[i])-min(Express_mean[i]))
  diff_old.append(max(Express_mean[i])-min(Express_mean[i]))
diff.sort()
ind=diff[0:8]
indx=diff[8:16]
indices=[]
indixes=[]
for i in ind:
  if i in diff_old:
    indices.append(diff_old.index(i))
for i in indx:
  if i in diff_old:
    indixes.append(diff_old.index(i))
print(indices)
print(indixes)

#14 Similarity Heatmap
SimilarExpress=[]
SimilarGene=[]
for i in indices:
  SimilarExpress.append(Express[len(tissues_chosen)*i:len(tissues_chosen)*i+len(tissues_chosen)])
  SimilarGene.append(Gene_list[i])
sns.heatmap(SimilarExpress, xticklabels=tissues_chosen, yticklabels=SimilarGene, cmap="YlGnBu")

#14 Dissimilarity Heatmap
DissimilarExpress=[]
DissimilarGene=[]
for i in indixes:
  DissimilarExpress.append(Express[len(tissues_chosen)*i:len(tissues_chosen)*i+len(tissues_chosen)])
  DissimilarGene.append(Gene_list[i])
sns.heatmap(DissimilarExpress, xticklabels=tissues_chosen, yticklabels=DissimilarGene, cmap="YlGnBu")